/*
 * Baum.cpp
 *
 *  Created on: 23 Jun 2022
 *      Author: Admin
 */

#include "Baum.h"
#include <iostream>
#include <string>
using namespace std;

Baum::Baum() {
	// TODO Auto-generated constructor stub

}

Baum::~Baum() {
	// TODO Auto-generated destructor stub
}

void Baum::wurzelknoten(){
	if(wurzel){
		cout << "Es wurde schon ein Wurzelknoten erstellt!" << endl;
	}else{
		newnode = new TreeNode;
		newnode->vater = nullptr;
		newnode->mutter = nullptr;
		newnode->nachfahre = nullptr;
		newnode->zeichen = "-->";
		newnode->vzeichen = "-->";
		newnode->ausgegeben = false;
		wurzel = newnode;
		runptr = wurzel;
		string vorname;
		string nachname;
		cout << "Vorname: ";
		cin >> vorname;
		newnode->vorname = vorname;
		cout << "Nachname: ";
		cin >> nachname;
		newnode->nachname = nachname;
	}
}

void Baum::plusvater(){
	if(!wurzel){
		cout << "Erst muss ein Wurzelknoten erstellt werden!" << endl;
	}else{
		newnode = new TreeNode;
		runptr->vater = newnode;
		newnode->nachfahre = runptr;
		newnode->zeichen = "/--";
		newnode->vzeichen = "/--";
		newnode->ausgegeben = false;
		newnode->vater = nullptr;
		newnode->mutter = nullptr;
		string vorname;
		string nachname;
		cout << "Vorname: ";
		cin >> vorname;
		newnode->vorname = vorname;
		cout << "Nachname: ";
		cin >> nachname;
		newnode->nachname = nachname;
	}
}

void Baum::plusmutter(){
	if(!wurzel){
		cout << "Erst muss ein Wurzelknoten erstellt werden!" << endl;
	}else{
		newnode = new TreeNode;
		runptr->mutter = newnode;
		newnode->nachfahre = runptr;
		newnode->zeichen = "\\--";
		newnode->vzeichen = "\\--";
		newnode->ausgegeben = false;
		newnode->vater = nullptr;
		newnode->mutter = nullptr;
		string vorname;
		string nachname;
		cout << "Vorname: ";
		cin >> vorname;
		newnode->vorname = vorname;
		cout << "Nachname: ";
		cin >> nachname;
		newnode->nachname = nachname;
	}
}

void Baum::zuvater(){
	if(!wurzel){
		cout << "Erst muss ein Wurzelknoten erstellt werden!" << endl;
	}else if(!runptr->vater){
		cout << "Der Vaterknoten existiert nicht!" << endl;
	}else{
		runptr->zeichen = runptr->vzeichen;
		runptr = runptr->vater;
		runptr->zeichen = ">>>";

	}
}

void Baum::zumutter(){
	if(!wurzel){
		cout << "Erst muss ein Wurzelknoten erstellt werden!" << endl;
	}else if(!runptr->mutter){
		cout << "Der Mutterknoten existiert nicht!" << endl;
	}else{
		runptr->zeichen = runptr->vzeichen;
		runptr = runptr->mutter;
		runptr->zeichen = ">>>";
	}
}

void Baum::zunachfahre(){
	if(!wurzel){
		cout << "Erst muss ein Wurzelknoten erstellt werden!" << endl;
	}else if(!runptr->nachfahre){
		cout << "Sie befinden sich am Wurzelknoten!" << endl;
	}else{
		runptr->zeichen = runptr->vzeichen;
		runptr = runptr->nachfahre;
		runptr->zeichen = ">>>";
	}
}

void Baum::printtree(){
	int i = 0;
	printptr = wurzel;
	while(printptr->vater){
		printptr = printptr->vater;
		i++;
	}
	for(int j = i; j > 0; j--){
		cout << "   ";
	}
	cout << printptr->zeichen << printptr->vorname << " " << printptr->nachname << endl;
	printptr->ausgegeben = true;

	if(printptr->mutter){
		printptr = printptr->mutter;
		i++;
	}
	while(printptr->vater){
		printptr = printptr->vater;
		i++;
	}
}

void Baum::draw_tree_hor(TreeNode *tree){
    // should check if we don't exceed this somehow..
    char path[255] = {};

    //initial depth is 0
    draw_tree_hor2(tree, 0, path, 0);
}

void Baum::draw_tree_hor2(TreeNode *tree, int depth, char *path, int right){
    // stopping condition
    if (tree == 0){
        return;
    }
    // increase spacing
    depth++;

    // start with right node
    draw_tree_hor2(tree->vater, depth, path, 1);
    if(depth > 1){
        // set | draw map
        path[depth-2] = 0;

        if(right){
            path[depth-2] = 1;
        }
    }

    if(tree->mutter){
        path[depth-1] = 1;
    }
    // print root after spacing
    printf("\n");

    for(int i=0; i<depth-1; i++){
      if(i == depth-2){
          printf("+");
      }else if(path[i]){
          printf("|");
      }else{
          printf(" ");
      }
      for(int j=1; j<space; j++){
    	  if(i < depth-2){
    		  printf(" ");
    	  }else{
    		  printf("-");
    	  }
      }
    }

    cout << tree->vorname << " " << tree->nachname << endl;

    // vertical spacers below
    for(int i=0; i<depth; i++){
      if(path[i]){
          printf("|");
      }else{
          printf(" ");
      }
      for(int j=1; j<space; j++){
          printf(" ");
      }
    }

    // go to left node
    draw_tree_hor2(tree->left, depth, path, 0);
}









